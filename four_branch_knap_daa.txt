def knapsack_dp(capacity, weights, values, n):
    # Initialize a 2D DP table with 0s
    dp = [[0] * (capacity + 1) for _ in range(n + 1)]
    
    # Fill the DP table using bottom-up approach
    for i in range(1, n + 1):
        for w in range(1, capacity + 1):
            if weights[i - 1] <= w:
                # If the item can fit in the knapsack, take the maximum of including or excluding the item
                dp[i][w] = max(values[i - 1] + dp[i - 1][w - weights[i - 1]], dp[i - 1][w])
            else:
                # Otherwise, exclude the item
                dp[i][w] = dp[i - 1][w]
    
    # The last cell contains the maximum value that can be obtained with the given capacity
    return dp[n][capacity]

# Input: Number of items
n = int(input("Enter number of items: "))

# Input: Values and weights for each item
values = [int(input(f"Value of item {i + 1}: ")) for i in range(n)]
weights = [int(input(f"Weight of item {i + 1}: ")) for i in range(n)]

# Input: Knapsack capacity
capacity = int(input("Enter knapsack capacity: "))

# Output: Maximum value that can be obtained
print(f"Maximum value: {knapsack_dp(capacity, weights, values, n)}")
