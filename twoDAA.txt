import heapq

# Define the Node class to represent each character and its frequency
class Node:
    def __init__(self, char, freq):
        self.char = char
        self.freq = freq
        self.left = None
        self.right = None

    # Comparison function to use in heapq for priority queue based on frequency
    def __lt__(self, other):
        return self.freq < other.freq

# Function to generate Huffman codes from the tree
def generate_codes(root, current_code, codes):
    if root is None:
        return
    if root.char is not None:
        codes[root.char] = current_code
        return
    # Recursively generate codes for left and right children
    generate_codes(root.left, current_code + "0", codes)
    generate_codes(root.right, current_code + "1", codes)

# Function to build the Huffman tree from frequency data
def build_huffman_tree(frequency):
    heap = [Node(char, freq) for char, freq in frequency.items()]
    heapq.heapify(heap)

    # Merge nodes until only one node is left (root of the Huffman tree)
    while len(heap) > 1:
        node1 = heapq.heappop(heap)
        node2 = heapq.heappop(heap)
        merged = Node(None, node1.freq + node2.freq)
        merged.left = node1
        merged.right = node2
        heapq.heappush(heap, merged)

    # Return the root of the Huffman tree
    return heap[0]

# Function to encode data using Huffman coding
def huffman_encoding(data):
    if not data:
        return "", {}

    # Calculate frequency of each character in the input data
    frequency = {}
    for char in data:
        if char in frequency:
            frequency[char] += 1
        else:
            frequency[char] = 1

    # Build the Huffman tree
    root = build_huffman_tree(frequency)

    # Generate Huffman codes
    codes = {}
    generate_codes(root, "", codes)

    # Encode the input data
    encoded_data = ''.join([codes[char] for char in data])

    return encoded_data, codes

# Function to decode Huffman encoded data
def huffman_decoding(encoded_data, codes):
    # Reverse the Huffman codes dictionary to decode
    reverse_codes = {v: k for k, v in codes.items()}
    decoded_data = ""
    current_code = ""

    # Decode the encoded data by traversing the current code
    for bit in encoded_data:
        current_code += bit
        if current_code in reverse_codes:
            decoded_data += reverse_codes[current_code]
            current_code = ""  # Reset current_code for next character

    return decoded_data

# Main function to drive the program
if __name__ == "__main__":
    # Get the data to encode from the user
    data = input("Enter the data to encode: ")

    # Perform Huffman encoding
    encoded_data, codes = huffman_encoding(data)

    # Output the results
    print("Huffman Codes:", codes)
    print("Encoded Data:", encoded_data)

    # Perform Huffman decoding
    decoded_data = huffman_decoding(encoded_data, codes)
    print("Decoded Data:", decoded_data)
